//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace BuilderGame.Input
{
    public partial class @Controls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Controls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""defaultmap"",
            ""id"": ""d67d0815-66d9-4429-b888-d930c2916107"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""47d3e7fc-867e-46f5-840f-ec3ca453b59f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap(duration=0.4)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""c7459140-573b-4e33-98dc-2f4f761908a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraMoveActive"",
                    ""type"": ""Button"",
                    ""id"": ""601884bf-89ca-4af9-a5c9-586302a07fbc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""303d7d9e-73a0-49fc-b4cc-d1f89e449609"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraMove"",
                    ""type"": ""Value"",
                    ""id"": ""728d65df-c283-4477-a8d2-34666d5b9284"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b3b90b12-3f8f-4820-968c-91672a918dfa"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb26be12-9bcb-46e4-9fd2-f0ed42187b88"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMoveActive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ae651c1-331f-4cc6-8614-745fb15061dc"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b388ab0b-26b8-4195-9d94-b0228e052621"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60a1716d-3e96-4690-b575-99961557ef22"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // defaultmap
            m_defaultmap = asset.FindActionMap("defaultmap", throwIfNotFound: true);
            m_defaultmap_Pause = m_defaultmap.FindAction("Pause", throwIfNotFound: true);
            m_defaultmap_Restart = m_defaultmap.FindAction("Restart", throwIfNotFound: true);
            m_defaultmap_CameraMoveActive = m_defaultmap.FindAction("CameraMoveActive", throwIfNotFound: true);
            m_defaultmap_Scroll = m_defaultmap.FindAction("Scroll", throwIfNotFound: true);
            m_defaultmap_CameraMove = m_defaultmap.FindAction("CameraMove", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // defaultmap
        private readonly InputActionMap m_defaultmap;
        private List<IDefaultmapActions> m_DefaultmapActionsCallbackInterfaces = new List<IDefaultmapActions>();
        private readonly InputAction m_defaultmap_Pause;
        private readonly InputAction m_defaultmap_Restart;
        private readonly InputAction m_defaultmap_CameraMoveActive;
        private readonly InputAction m_defaultmap_Scroll;
        private readonly InputAction m_defaultmap_CameraMove;
        public struct DefaultmapActions
        {
            private @Controls m_Wrapper;
            public DefaultmapActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Pause => m_Wrapper.m_defaultmap_Pause;
            public InputAction @Restart => m_Wrapper.m_defaultmap_Restart;
            public InputAction @CameraMoveActive => m_Wrapper.m_defaultmap_CameraMoveActive;
            public InputAction @Scroll => m_Wrapper.m_defaultmap_Scroll;
            public InputAction @CameraMove => m_Wrapper.m_defaultmap_CameraMove;
            public InputActionMap Get() { return m_Wrapper.m_defaultmap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DefaultmapActions set) { return set.Get(); }
            public void AddCallbacks(IDefaultmapActions instance)
            {
                if (instance == null || m_Wrapper.m_DefaultmapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_DefaultmapActionsCallbackInterfaces.Add(instance);
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Restart.started += instance.OnRestart;
                @Restart.performed += instance.OnRestart;
                @Restart.canceled += instance.OnRestart;
                @CameraMoveActive.started += instance.OnCameraMoveActive;
                @CameraMoveActive.performed += instance.OnCameraMoveActive;
                @CameraMoveActive.canceled += instance.OnCameraMoveActive;
                @Scroll.started += instance.OnScroll;
                @Scroll.performed += instance.OnScroll;
                @Scroll.canceled += instance.OnScroll;
                @CameraMove.started += instance.OnCameraMove;
                @CameraMove.performed += instance.OnCameraMove;
                @CameraMove.canceled += instance.OnCameraMove;
            }

            private void UnregisterCallbacks(IDefaultmapActions instance)
            {
                @Pause.started -= instance.OnPause;
                @Pause.performed -= instance.OnPause;
                @Pause.canceled -= instance.OnPause;
                @Restart.started -= instance.OnRestart;
                @Restart.performed -= instance.OnRestart;
                @Restart.canceled -= instance.OnRestart;
                @CameraMoveActive.started -= instance.OnCameraMoveActive;
                @CameraMoveActive.performed -= instance.OnCameraMoveActive;
                @CameraMoveActive.canceled -= instance.OnCameraMoveActive;
                @Scroll.started -= instance.OnScroll;
                @Scroll.performed -= instance.OnScroll;
                @Scroll.canceled -= instance.OnScroll;
                @CameraMove.started -= instance.OnCameraMove;
                @CameraMove.performed -= instance.OnCameraMove;
                @CameraMove.canceled -= instance.OnCameraMove;
            }

            public void RemoveCallbacks(IDefaultmapActions instance)
            {
                if (m_Wrapper.m_DefaultmapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IDefaultmapActions instance)
            {
                foreach (var item in m_Wrapper.m_DefaultmapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_DefaultmapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public DefaultmapActions @defaultmap => new DefaultmapActions(this);
        public interface IDefaultmapActions
        {
            void OnPause(InputAction.CallbackContext context);
            void OnRestart(InputAction.CallbackContext context);
            void OnCameraMoveActive(InputAction.CallbackContext context);
            void OnScroll(InputAction.CallbackContext context);
            void OnCameraMove(InputAction.CallbackContext context);
        }
    }
}
